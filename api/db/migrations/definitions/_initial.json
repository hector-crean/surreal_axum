{"schemas":"-- Define a scope for clients to authenticate to\n-- Session should last 7 days\n-- User should be able to signin with their username and password\n-- Users should be able to sign up their name, usernamem and password\nDEFINE SCOPE user SESSION 7d\n    SIGNIN (\n        SELECT * FROM user WHERE username = $username AND crypto::argon2::compare(password, $password)\n    )\n    SIGNUP (\n        CREATE user CONTENT {\n            name: $name,\n            username: $username,\n            password: crypto::argon2::generate($password)\n        }\n    );\nDEFINE TABLE post SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select, update, delete WHERE author = $auth.id;\n\nDEFINE FIELD content ON post TYPE string DEFAULT \"\";\nDEFINE FIELD color ON post TYPE string ASSERT $value IN ['pink', 'purple'];\nDEFINE FIELD author ON post TYPE record<user> \n    VALUE $before OR $auth.id \n    DEFAULT $auth.id;\n\nDEFINE FIELD created ON post TYPE datetime\n    VALUE $before OR time::now()\n    DEFAULT time::now();\nDEFINE FIELD updated ON post TYPE datetime\n    VALUE time::now()\n    DEFAULT time::now();\nDEFINE TABLE script_migration SCHEMAFULL;\n\nDEFINE FIELD script_name ON script_migration TYPE string;\nDEFINE FIELD executed_at ON script_migration TYPE datetime VALUE $before OR time::now();\nDEFINE TABLE spacetime_geometry SCHEMAFULL;\n\n\nDEFINE FIELD author ON spacetime_geometry TYPE option<record<user>>\n    VALUE $before OR $auth.id \n    DEFAULT $auth.id;\n\nDEFINE FIELD geometry ON spacetime_geometry TYPE geometry<feature>;\n\nDEFINE FIELD timestamp ON spacetime_geometry TYPE float;\n\nDEFINE FIELD duration ON spacetime_geometry TYPE duration;\n\nDEFINE FIELD title ON spacetime_geometry TYPE string;\n\nDEFINE FIELD text_body on spacetime_geometry TYPE string;\n\nDEFINE FIELD created ON spacetime_geometry TYPE datetime\n    VALUE $before OR time::now()\n    DEFAULT time::now();\nDEFINE FIELD updated ON spacetime_geometry  TYPE datetime\n    VALUE time::now()\n    DEFAULT time::now();\n\n-- Add a table that describe the relaion between posts and tags\n-- Table must restruct the client to only be able to create relations between posts\n\n\nDEFINE TABLE spacetime_geometry_to_video_edge SCHEMAFULL\n    PERMISSIONS\n        FOR create, select, update, delete \n            WHERE in.author == $auth.id AND out.author == $auth.id;\n\nDEFINE FIELD in ON spacetime_geometry_to_video_edge TYPE record<spacetime_geometry>;\nDEFINE FIELD out ON spacetime_geometry_to_video_edge TYPE record<video>;\n\nDEFINE FIELD created ON spacetime_geometry_to_video_edge  TYPE datetime\n    VALUE $before OR time::now()\n    DEFAULT time::now();\nDEFINE FIELD updated ON spacetime_geometry_to_video_edge  TYPE datetime\n    VALUE time::now()\n    DEFAULT time::now();\nDEFINE TABLE tag SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select, update, delete WHERE owner = $auth.id;\n\nDEFINE FIELD name ON tag TYPE string ASSERT string::len($value) > 0;\nDEFINE FIELD owner ON tag TYPE record<user> \n    VALUE $before OR $auth.id \n    DEFAULT $auth.id;\n\nDEFINE FIELD created ON tag TYPE datetime\n    VALUE $before OR time::now()\n    DEFAULT time::now();\nDEFINE FIELD updated ON tag  TYPE datetime\n    VALUE time::now()\n    DEFAULT time::now();\n\nDEFINE EVENT removal ON tag WHEN $event = \"DELETE\" THEN {\n    DELETE $before.id->assigned_to;\n};\n-- Add a table that describe the relaion between posts and tags\n-- Table must restruct the client to only be able to create relations between posts\n\n\nDEFINE TABLE tag_to_post_edge SCHEMAFULL\n    PERMISSIONS\n        FOR create, select, update, delete \n            WHERE in.owner == $auth.id AND out.author == $auth.id;\n\nDEFINE FIELD in ON tag_to_post_edge TYPE record<tag>;\nDEFINE FIELD out ON tag_to_post_edge TYPE record<post>;\n\nDEFINE FIELD created ON tag_to_post_edge TYPE datetime\n    VALUE $before OR time::now()\n    DEFAULT time::now();\nDEFINE FIELD updated ON tag_to_post_edge  TYPE datetime\n    VALUE time::now()\n    DEFAULT time::now();\n\n\n\n\n-- Define a table where a user can select, update and delete their account: \nDEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n        FOR select, update, delete WHERE id = $auth.id;\n\nDEFINE FIELD name ON user TYPE string ASSERT string::len($value) >= 2;\nDEFINE FIELD username ON user TYPE string VALUE string::lowercase($value);\nDEFINE FIELD password ON user TYPE string PERMISSIONS FOR select NONE;\n\nDEFINE FIELD created ON user  TYPE datetime\n    VALUE $before OR time::now()\n    DEFAULT time::now();\nDEFINE FIELD updated ON user  TYPE datetime\n    VALUE time::now()\n    DEFAULT time::now();\n\nDEFINE INDEX unique_username ON user FIELDS username UNIQUE;\n\nDEFINE EVENT removal ON user WHEN $event = \"DELETE\" THEN {\n    DELETE post WHERE author = $before.id;\n    DELETE tag WHERE owner = $before.id;\n};\nDEFINE TABLE video SCHEMAFULL\n    PERMISSIONS\n        FOR create WHERE $scope = 'user'\n        FOR select, update, delete WHERE author = $auth.id;\n\n\nDEFINE FIELD author ON video TYPE option<record<user>>\n    VALUE $before OR $auth.id \n    DEFAULT $auth.id;\n\nDEFINE FIELD title on video TYPE string;\nDEFINE FIELD description on video TYPE string;\nDEFINE FIELD s3_key on video TYPE string;\nDEFINE FIELD s3_url on video TYPE string;\n\nDEFINE FIELD created ON video TYPE datetime\n    VALUE $before OR time::now()\n    DEFAULT time::now();\nDEFINE FIELD updated ON video  TYPE datetime\n    VALUE time::now()\n    DEFAULT time::now();\n","events":""}