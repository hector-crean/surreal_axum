use serde::{Deserialize, Serialize};

/// Represents the name and arguments of a function that should be called, as generated by the model.
#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct FunctionCall {
    /// The arguments to call the function with, as generated by the model in JSON format.
    /// Note that the model does not always generate valid JSON, and may hallucinate parameters
    /// not defined by your function schema. Validate the arguments in your code before calling your function.
    #[serde(skip_serializing_if = "Option::is_none")]
    arguments: Option<String>,
    /// The name of the function to call.
    #[serde(skip_serializing_if = "Option::is_none")]
    name: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub enum FunctionCallType {
    None,
    Auto,
    Function(FunctionCall),
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Function {
    ///A description of what the function does, used by the model to choose when and how to call the function.
    #[serde(skip_serializing_if = "Option::is_none")]
    description: Option<String>,
    ///The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    name: String,
    ///The parameters the functions accepts, described as a JSON Schema object.
    parameters: serde_json::Value, // JSON Schema object
}
